name: Publish to PyPI

on:
  push:
    tags:
      - "v*.*.*"  # triggers on version tags like v1.2.3

jobs:
  build-and-publish:
    name: Build and publish to PyPI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for generating release notes

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --with dev

      - name: Install package in development mode
        run: poetry run pip install -e .

      - name: Run tests
        run: poetry run pytest 

      - name: Build package
        run: poetry build

      - name: Create archives
        run: |
          VERSION=$(poetry version -s)
          tar -czf dist/mongoagg-${VERSION}.tar.gz mongoagg/
          zip -r dist/mongoagg-${VERSION}.zip mongoagg/

      - name: Generate release notes
        id: release_notes
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If this is the first tag, get all commits
            git log --pretty=format:"* %s (%h)" > release_notes.txt
          else
            # Get commits between previous tag and current HEAD
            git log --pretty=format:"* %s (%h)" ${PREV_TAG}..HEAD > release_notes.txt
          fi
          RELEASE_NOTES=$(cat release_notes.txt)
          echo "notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.tar.gz
            dist/*.zip
          body: ${{ steps.release_notes.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish